1. What happens when you initialize a repository? What do you need to do it?

To initialize a repository, you use the command git init. This creates a
hidden .git file in the directory that you chose that contains the metadata
stored for all of the files.


--------------------------------------------------------------------------------
2. How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area is an intermediary stage that allows you to organize all of the
files that you want to commit before having to commit it. The working directory
is the directory that you are currently in. It's a physical location on your
computer whereas the staging area is more nebulous. The repository is a location
where metadata for the files in the working directory is stored.


--------------------------------------------------------------------------------
3. How can you use the staging area to make sure you have one commit per logical
change?

You can check what files are in the staging area before you commit it. This way
you can ensure that all of the files that you are about to commit relate to
the same single change so that the commit has one logical change.


--------------------------------------------------------------------------------
4. What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches are helpful when you want to try different things with your code
that start with the same base. For example, if you want to try different ways
to implement/edit/add a certain feature. Branches are good for keeping these
separate both visually within your git log/branches as well as functionally
with code as they will contain differences.


--------------------------------------------------------------------------------
5. How do the diagrams help you visualize the branch structure?

The diagrams help to show when specific branches differ from the master branch.
This is useful to see what branches contain what commits from the master branch.


--------------------------------------------------------------------------------
6. What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

By merging two branches together you allow one (usually the master) branch to be
able to access commits from both branches. This makes it easier to access and
see commits because you don't have to switch back and forth between branches
plus the commits are all in one log. We represent it in the diagram the way we
do because it shows that they are now connected, but you can still see when they
were branched from the original master. This way they are in one diagram but
still maintain their individuality.


--------------------------------------------------------------------------------
7. What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Automatic merging is nice in that you just tell Git to merge branches and it
will merge the two. However, this is a little tricky when there are merge
conflicts, so you need to manually go in and fix the files before they can
be merged together. In this sense, Git is unable to think on its own to fix
these solutions, but it is able to carry out tasks given to it when they're
error free.


--------------------------------------------------------------------------------
